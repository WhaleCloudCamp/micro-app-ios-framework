# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

build_path = "build"
sh "mkdir -p #{build_path}"

default_platform(:ios)

platform :ios do

  desc "Clone source code"
  desc "#### Options"
  desc "* **source_code_url** source code git url"
  desc "* **target_path** target path to clone source code"
  lane :clone_source_code do |options|
    source_code_url = options[:source_code_url]
    target_path = options[:target_path]
    sh "git clone #{source_code_url} #{target_path}"
  end
  
  desc "build AlitaNativeLib.framework"
  desc "#### Options"
  desc "* **source_code_url** source code git url"
  desc "* **tag** tag to build"
  lane :build_framework do |options|

    remote = options[:remote] ? options[:remote] : (ENV["DEPLOY_REMOTE"] ? ENV["DEPLOY_REMOTE"] : "origin")
    allowed_branch = options[:allow_branch] ? options[:allow_branch] : (ENV["DEPLOY_BRANCH"] ? ENV["DEPLOY_BRANCH"] : "main")

    # checkout allow branch, -B create new branch if it doesnâ€™t exist
    sh "git checkout -B #{allowed_branch}"

    #Ensure we are on the right branch
    ensure_git_branch(
      branch: allowed_branch
    )
  
    sh("git pull #{remote} #{allowed_branch}")

    source_code_url = options[:source_code_url]
    sh "mkdir -p #{build_path}"
    target_path = "#{build_path}/micro-app"
    sh "rm -rf #{target_path}"
    clone_source_code(source_code_url: source_code_url, target_path: target_path)
    # get source code latest tag
    tag = sh "cd #{target_path} && git describe --tags --abbrev=0"
    tag = tag.strip
    if options[:tag]
      tag = options[:tag]
    end
    sh "cd #{target_path} && git checkout #{tag}"
    curTag = sh "cd #{target_path} && git describe --tags --abbrev=0"
    curTag = curTag.strip
    if tag != curTag
      raise "tag #{tag} not exists on source code repo".red
    end

    # check if tag exists at this repo
    if git_tag_exists(tag: tag)
      puts "tag: #{tag} already exists"
      next
    end

    # build framework
    sh "cd #{target_path}
    bundle exec fastlane build_AlitaNative
    "
    framework_path = "#{target_path}/build/AlitaNativeLib.framework"
    if (Dir.exist? "#{framework_path}")
      sh "cp -R #{framework_path} ../"
    else
      raise "build framework fail"
    end

    # bump podspec
    version_bump_podspec(
      path: './AlitaNativeLib.podspec',
      version_number: tag
    )

    # commit changes
    git_commit(
      path: './',
      message: "Update to version:#{tag}"
    )

    #push the branch
    push_to_git_remote(
      remote: remote,
      local_branch: allowed_branch,
      remote_branch: allowed_branch
    )

    # add tag
    add_git_tag(
      tag: tag,
    )

    # push the tag
    push_git_tags

  end
end
